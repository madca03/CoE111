// 2's complement subtraction
			3'b001: begin
				// if same signs, subtract
				if (!(opA[7] ^ opB[7])) begin
					if (opA_mag[0] >= opB_mag[0]) begin
						res_temp = opA_mag[0] - opB_mag[0];
						res = (opA[7] == 1'b1) ? (~res_temp + 1) : res_temp;
					end else begin
						res_temp = opB_mag[0] - opA_mag[0];
						res = (opB[7] == 1'b1) ? (~res_temp + 1) : res_temp;
					end
				end 
				// if different signs, add
				else begin
					res_temp = opA_mag[0] + opB_mag[0];
					res = (opA[7] == 1'b1) ? (~res_temp + 1) : res_temp;
				end
			end	// end opt-case

		// magnitude for 1's complement
		opA_mag[1] = (opA[7] == 1'b1) ? (~opA) : opA;
		opB_mag[1] = (opB[7] == 1'b1) ? (~opB) : opB;
		// magnitude for signed magnitude
		opA_mag[2] = (opA[7] == 1'b1) ? {1'b0, opA[6:0]} : opA;
		opB_mag[2] = (opB[7] == 1'b1) ? {1'b0, opB[6:0]} : opB;



case (sel)
			// 2's complement addition
			3'b000: begin
				if (opA[7] ^ opB[7]) begin
					if (opA_mag[0] >= opB_mag[0]) begin
						res_temp = opA_mag[0] - opB_mag[0];
						res = (opA[7] == 1'b1) ? (~res_temp + 1) : res_temp;
					end else begin
						res_temp = opB_mag[0] - opA_mag[0];
						res = (opB[7] == 1'b1) ? (~res_temp + 1) : res_temp;
					end

				end
				// if same signs, add 
				else begin
					res_temp = opA_mag[0] + opB_mag[0];
				end // end if
			end // end opt-case
			
		endcase
